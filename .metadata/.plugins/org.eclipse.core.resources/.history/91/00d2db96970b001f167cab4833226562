package xml_smt_trans;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * 
 */

/**
 * This class is the core of the translation from Rodin-XML format to SMT-LIB format. To make the 
 * translation of a entire document, is necessary to call the class Translator. Each instance of this class makes 
 * the translation of one only lemma.  
 * @author Vitor Alcântara de Almeida
 *
 */
public class LemmaTranslator {
	
	private static final int LEFT_ONLY = 0;
	private static final int RIGHT_ONLY = 1;
	public static final int BOTH_SIDES = 2;
	public static final int NONE = 0;
	public static final int OPERATOR_ONLY = RIGHT_ONLY;
	public static final int ALL_OPERATIONS = BOTH_SIDES;
	public static final int OPERANDS_ONLY = 3;
	public static final int PAIR_SET = NONE;
	public static final int SINGLE_SET = OPERATOR_ONLY;
	private boolean onlyTrueHypothesis = false;
	
	private int numberOfLemma;
	
	private ArrayList<OperationMapping<String,String>> charMap,listOfVariables,preds,funs;
	private ArrayList<String> sorts,setOfHypothesis;
	private ArrayList<OperationMappingPlus<String,String,Integer>> macrosOfSets;
	private ArrayList<OperationMappingPlus<String, String, String>> minMaxAssumptions;
	private String nameOfLemma, parsedGoal;
	private OperatorSet operatorSet;
	private OperandSet operandSet;
	
	
	/**
	 * Initializes all the necessary private variables.
	 */
	private void initContext()
	{
		minMaxAssumptions = new ArrayList<OperationMappingPlus<String,String,String>>();
		macrosOfSets = new ArrayList<OperationMappingPlus<String,String,Integer>>();
		operatorSet = new OperatorSet();
		operandSet = new OperandSet();
		charMap = new ArrayList<OperationMapping<String,String>>();
		funs = new ArrayList<OperationMapping<String,String>>();
		preds = new ArrayList<OperationMapping<String,String>>();
		sorts = new ArrayList<String>();
		
		listOfVariables = new ArrayList<OperationMapping<String,String>>();

		sorts.add("Int");
		sorts.add("Bool");
		
		//u+2115: Numeros Naturais
		
		
		
		
	}
	
	/** Constructs the class which the <code>org.w3c.dom.Element</code> which contains the lemma
	 * that will be translated, the argument which decides if only necessary hypothesis will be translated
	 * and the path of the destination folder.	 * 
	 * @param lemma The lemma that will be translated
	 * @param onlyTrueHypothesis If true, hypothesis which does not have the attribute 'needed', or do have it
	 * but it's value is not 'true' won't be translated. If false, all the document will be translated.
	 * @param PATH The folder where the translated file will be saved.
	 * @see Translator
	 */
	public LemmaTranslator()
	{					
	}
	
	public void beginParsing(Element lemma, boolean onlyTrueHypothesis, String PATH)
	{
		this.onlyTrueHypothesis = onlyTrueHypothesis;
		initContext();		
		parseLemma(lemma);
		printLemmaOnFile(PATH);	
	}
	
	
	/**
	 * This method print all the the translated file to a .SMT file, which
	 * will be saved on the <code>PATH</code> folder.
	 * @param PATH The folder where the translated file will be saved.
	 */
	private void printLemmaOnFile(String PATH)
	{
		String normalNameOfLemma = nameOfLemma.replace('.', '_');
		normalNameOfLemma = normalNameOfLemma.replace('\\', '_');
		normalNameOfLemma = normalNameOfLemma.replace('/', '_');
		String benchmark = "(benchmark " + normalNameOfLemma;
		final String FINAL_PATH = PATH + File.separator + normalNameOfLemma + ".smt";
		System.out.println(FINAL_PATH);
		try
		{
			PrintWriter out
			   = new PrintWriter(new BufferedWriter(new FileWriter(FINAL_PATH)));
			out.println(benchmark);
			out.println(":logic UNKNOWN");
			if(!sorts.isEmpty())
			{				
				String extrasorts = ":extrasorts (";
				for(int i = 0 ; i < sorts.size() ; i++)
				{
					extrasorts = extrasorts + "(" + sorts.get(i) + ")";
				}
				extrasorts = extrasorts + ")";
				out.println(extrasorts);
			}
			
			if(!preds.isEmpty())
			{
				String extrafuns = ":extrapreds (";
				for(int i = 0 ; i < preds.size() ; i++)
				{
					extrafuns = extrafuns + "(" + preds.get(i).getOriginalOp() 
					+ " " + preds.get(i).getSmtOp() + ")";
				}
				extrafuns = extrafuns + ")";
				out.println(extrafuns);
			}
			
			
			if(!funs.isEmpty())
			{
				String extrafuns = ":extrafuns (";
				for(int i = 0 ; i < funs.size() ; i++)
				{
					extrafuns = extrafuns + "(" + funs.get(i).getOriginalOp() 
					+ " " + funs.get(i).getSmtOp() + ")";
				}
				extrafuns = extrafuns + ")";
				out.println(extrafuns);
			}
			
			out.println(":extramacros (");
			out.println("(union (lambda (?p1 ('t boolean)) (?q1 ('t boolean)) . (lambda (?x 't) . (or (?p1 ?x) (?q1 ?x)))))"); //union
			out.println("(emptyset (lambda (?x 's) . false))"); //empty
			out.println("(inter  (lambda (p ('s Bool))(q ('s Bool)) (lambda (?x 's) (and (p ?x) (q ?x)))))"); //inter
			out.println("(setminus (lambda (?p1 ('t boolean)) (?q1 ('t boolean)) . (lambda (?x 't) . (and (?p1 ?x) (not (?q1 ?x))))))");//setminus
			out.println("(in (lambda (?x1 't1) (?p ('t1 boolean)) . (?p ?x1)))");//in
			out.println("(subseteq (lambda (?p ('t boolean)) (?q ('t boolean)) . (forall (?x 't) . (implies (?p ?x) (?q ?x)))))");//subseteq
			out.println("(subset (lambda (?p ('t boolean)) (?q ('t boolean)) . (and (subseteq ?p ?q) (not (= ?p ?q)))))");//subset
			out.println("(range (lambda (?i1 Int) (?i2 Int) . (lambda (?i Int) . (and (<= ?i1 ?i) (<= ?i ?i2)))))");//range
			out.println("(Nat (lambda (?i Int) . (<= 0 ?i)))");//natural
			//out.println("(ismin (lambda (m Int) (t (Int Bool)) (and(in m t)(forall (?x Int) (implies (in ?x t)(<= m ?x))))))");
			//out.println("(ismax (lambda (?m Int) (?pi (Int boolean)) . (and (?pi ?m)(forall (?i1 Int) . (implies (?pi ?i1) (<= ?i1 ?m))))))");
			out.println("(ismax (lambda (?m Int) (?t (Int boolean)) (and(in ?m ?t)(forall (?x Int) . (implies (in ?x ?t)(<=?x ?m))))))");
			out.println("(ismin (lambda (?m Int) (?t (Int boolean)) (and(in ?m ?t)(forall (?x Int) . (implies (in ?x ?t)(<=?m ?x))))))");
			out.println("(Nat1 (lambda (?i Int) . (<= 1 ?i)))");
			out.println("(couple (lambda (?x 't) (?y 't) . (lambda (?z 't) . (or (= ?z ?x) (= ?z ?y)))))");
			out.println("(cartesianproduct (lambda (?p ('t1 boolean)) (?q ('t2 boolean)) . (lambda (?x1 't1) (?x2 't2) . (and (?p ?x1) (?q ?x2)))))");
			out.println("(domain (lambda (?r ('t1 't2 boolean)) . (lambda (?x1 't1) . (exists (?x2 't2) . (?r ?x1 ?x2)))))");
			out.println("(singleton (lambda (?x 't) . (lambda (?y 't) . (= ?x ?y))))");			
			out.println("(subseteq2 (lambda (?p ('t1 't2 boolean)) (?q ('t1 't2 boolean)) . (forall (?x1 't1) (?x2 't2) . (implies (?p ?x1 ?x2) (?q ?x1 ?x2)))))");
			for(int i = 0 ; i < macrosOfSets.size() ; i++)
			{
				out.println("(" + macrosOfSets.get(i).getOriginalOp() + " " + macrosOfSets.get(i).getSmtOp() + ")" );
			}			
			out.println(")");
			
			for(int i = 0; i < minMaxAssumptions.size() ; i ++ )
			{
				out.println(":assumption (" + minMaxAssumptions.get(i).getLevel() + " " 
						+ minMaxAssumptions.get(i).getOriginalOp()
						+ " " + minMaxAssumptions.get(i).getSmtOp() + ")" );
			}
			
			if(setOfHypothesis != null && !setOfHypothesis.isEmpty())
			{
				for(int i = 0 ; i < setOfHypothesis.size() ; i++)
				{
					out.println(":assumption " + setOfHypothesis.get(i));
				}
			}
			if(!parsedGoal.isEmpty())
			{
				out.println(":formula " + parsedGoal);
			}
			
			out.println(")");
			out.close();			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * This method extracts the type inside a powerset variable, that is,
	 * it returns the string inside a ℙ().  
	 * @param powerSet The String that is a powerset.
	 * @return If powerSet has the form ℙ(), this will return the string inside the parenthesis,
	 * else it only returns powerSet. 
	 */
	private String getTypeOfPowerSet(String powerSet)
	{
		if(powerSet.startsWith("ℙ(") || powerSet.startsWith("POW(") )
		{
			String type = powerSet.substring(2, powerSet.length()-1);
		    System.out.println("O Tipo para o Conjunto das Partes é: " + type);
		    return type;
		}
		return null;
	}
		
	/**
	 * This method parses the variables of the lemma
	 * @param typeEnvironment The element of the lemma Document which contains the variables.
	 */
	private void parseTypeEnv(Element typeEnvironment)
	{
		NodeList variables = typeEnvironment.getElementsByTagName("variable");
		if( variables.getLength() > 0)
		{
			for(int i = 0 ; i < variables.getLength() ; i++ )
			{
				String varName = ((Element)variables.item(i)).getAttribute("name").trim();
				String varType = ((Element)variables.item(i)).getAttribute("type").trim();
				if(operandSet.isOperand(varType))
				{
					varType = operandSet.getSMTOperand(varType);
				}
				
				listOfVariables.add(new OperationMapping<String, String>(varName, varType));
			
				
				//Regra 4
				if(varName.equals(varType))
				{
					charMap.add(new OperationMapping<String, String>(varType, varType));
					sorts.add(varType);
				}
				
				//Regra 6
				else if(varType.startsWith("ℙ(") || varType.startsWith("POW(") )
				{
					charMap.add(new OperationMapping<String, String>(varName, varName));
					preds.add(new OperationMapping<String, String>(varName, varType = operandSet.getSMTOperand(getTypeOfPowerSet(varType))));
					
				}
				
				//Regra 5
				else
				{
					charMap.add(new OperationMapping<String, String>(varName, varName));
					funs.add(new OperationMapping<String, String>(varName,varType));					
				}				
			}	
		}
				
	}
	
	/**
	 * This method checks if a String is a standard variable, a variable defined on the lemma or 
	 * a number. 
	 * @param chars The String to be checked.
	 * @return True if <code>chars</code> is a standard variable, a variable defined on the lemma or 
	 * a number, False otherwise. 
	 */
	private boolean isOperand(String chars)
	{
		if (Translator.isNumber(chars))
		{
			return true;
		}
		if(chars.startsWith("{") && chars.endsWith("}"))
		{
			return true;
		}
		
		for(int i = 0 ; i < funs.size() ; i++)
		{
			if(chars.equals(funs.get(i).getOriginalOp()))
			{
				return true;
			}		
		}		
		for(int i = 0 ; i < minMaxAssumptions.size() ; i++)
		{
			if(chars.equals(minMaxAssumptions.get(i).getOriginalOp()))
			{
				return true;
			}
		}
		for(int i = 0 ; i < listOfVariables.size() ; i++)
		{
			if(chars.equals(listOfVariables.get(i).getOriginalOp()))
			{
				return true;
			}
			if(chars.startsWith("{") && chars.endsWith("}"))
			{
				return true;
			}			
		}		
		return false;
	}
	
	/**
	 * This method return the type of a operator, i.e., if a operator is binary or unary.
	 * @param operator The operator to be checked
	 * @return 2 if binary, 1 if unary.
	 */
	private int operatorType(String operator)
	{
		if(operator.equals("=")||operator.equals("+")||operator.equals("-") ||operator.equals("&lt;"))
		{
			return 2;
		}
		if(operator.equals("¬"))
		{
			return 1;
		}
		return 2;
	}
	/**
	 * This method parses sets founds in the hypothesis and in the goal, i.e.,
	 * the substrings contained between '{' and '}'.
	 * @param symbol the substring between '{' and '}'
	 * @return the String which represent the parsed set.
	 */
//	private String parseSet(String symbol)
//	{
//			String[] pieces = symbol.split(",");
//			if(pieces.length == 1)
//			{
//				return "(singleton " + pieces[0].trim() + ")";
//			}
//			if(pieces.length == 2)
//			{
//				return "(couple " + pieces[0].trim() + " " + pieces[1].trim() + ")";
//			}
//			else if(pieces.length > 2)
//			{
//				String type = getTypeOfVariable(pieces[0].trim());
//				String macroSet = "(lambda (?elem " + type + ") . or";
//				for(int i = 0 ; i < pieces.length ; i++ )
//				{
//					macroSet = macroSet + " (= ?elem " + pieces[i].trim() + ")";
//				}
//				macroSet = macroSet + "))";
//				for(int i = 0 ; i < macrosOfSets.size() ; i++)
//				{
//					if(macroSet.equals(macrosOfSets.get(i)))
//					{
//						return macrosOfSets.get(i).getOriginalOp();
//					}					
//				}
//				String name = "enum" +  macrosOfSets.size();
//				macrosOfSets.add(new OperationMapping<String, String>(name, macroSet));
//				return name;
//			}	
//			return symbol;
//	}
	
	private String parseSet(String symbol)
	{
			String[] pieces = symbol.split(",");
			String[] elementOfSets = pieces[0].split(OperatorSet.PAIR_ARROW);
			if(elementOfSets.length == 1)
			{
				if(pieces.length == 1)
				{
					return "(singleton " + pieces[0].trim() + ")";
				}
				if(pieces.length == 2)
				{
					return "(couple " + pieces[0].trim() + " " + pieces[1].trim() + ")";
				}
				else if(pieces.length > 2)
				{
					String type = getTypeOfVariable(pieces[0].trim());
					String macroSet = "(lambda (?elem " + type + ") . or";
					for(int i = 0 ; i < pieces.length ; i++ )
					{
						macroSet = macroSet + " (= ?elem " + pieces[i].trim() + ")";
					}
					macroSet = macroSet + "))";
					for(int i = 0 ; i < macrosOfSets.size() ; i++)
					{
						if(macroSet.equals(macrosOfSets.get(i).getSmtOp()))
						{
							return macrosOfSets.get(i).getOriginalOp();
						}					
					}
					String name = "enum" +  macrosOfSets.size();
					macrosOfSets.add(new OperationMapping<String, String>(name, macroSet,SINGLE_SET));
					return name;
				}
			}
			else if(elementOfSets.length == 2)
			{
				String type1 = getTypeOfVariable(elementOfSets[0].trim());
				String type2 = getTypeOfVariable(elementOfSets[1].trim());
				String macroSet = "(lambda (?s1 " + type1 + ") (?s2 " + type2 + ") . ";
				if(pieces.length == 1)
				{
					macroSet = macroSet + "(= pair ?s1 ?s2) (pair " + elementOfSets[0].trim() + " " + elementOfSets[1].trim() + "))))";
				}
				else
				{
					macroSet = macroSet + "(or ";
					for(int k = 0 ; k < pieces.length ; k ++)
					{
						elementOfSets = pieces[k].split(OperatorSet.PAIR_ARROW);
						macroSet = macroSet + "(= (pair ?s1 ?s2) (pair " + elementOfSets[0].trim() + " " + elementOfSets[1].trim() + ")";
					}
					macroSet = macroSet + "))))";
				}
				for(int i = 0 ; i < macrosOfSets.size() ; i++)
				{
					if(macroSet.equals(macrosOfSets.get(i).getSmtOp()))
					{
						return macrosOfSets.get(i).getOriginalOp();
					}					
				}
				String name = "enum" +  macrosOfSets.size();
				macrosOfSets.add(new OperationMapping<String, String>(name, macroSet));
				return name;
								
			}				
			return symbol;
	}
	
	
	/** Returns the type of a variable.
	 * 
	 * @param var the variable.
	 * @return the <code>var</code> type.
	 */
	private String getTypeOfVariable(String var)
	{
		if(Translator.isNumber(var))
		{
			return OperandSet.NATURAL;
		}
		for(int i = 0 ; i < funs.size() ; i++)
		{
			if(var.equals(funs.get(i).getOriginalOp()))
			{
				return funs.get(i).getSmtOp();
			}
		}
		return null;
	}
	
	/**
	 * This method is called through other parseHypothesis method which receives
	 * a String as parameter. this method receives a list with a operand
	 * or operator in each space, in the same order as the hypothesis or the goal
	 * String.
	 * <br></br> 
	 * Before this method is called, it is necessary to parse some special types of operand
	 * and operators, so it is far not recommended to split the hypothesis String
	 * and use this method directly.
	 * <br></br> 
	 * @param hypo the list filled with the operands and operators of the hypothesis
	 * that will be translated, in the same order as it appears in the 
	 * hypothesis and the goal String.
	 * @return
	 */
	private String parseHypothesis(ArrayList<String> hypo)
	{
		int parenthesisLevel = 0;
		ArrayList<Relation> operators = new ArrayList<Relation>();
		LinkedList<Relation> operands = new LinkedList<Relation>(); 
		for(int i = 0, j = 0 ; i < hypo.size() ; i++)
		{			
			if(hypo.get(i).equals("(")  )
			{
				parenthesisLevel += 1;
			}
			else if(hypo.get(i).equals(")")  )
			{
				parenthesisLevel -= 1;
			}
			else if(isOperand(hypo.get(i)))
			{
				operands.add(new Relation(hypo.get(i),j,parenthesisLevel));
				++j;
				
			}
			else
			{
				operators.add(new Relation(hypo.get(i),j,parenthesisLevel));
				++j;
			}
		}
		Collections.sort(operators);
		for(int i = 0 ; i < operators.size() ; i++)
		{
			String before = "";
			String after = "";
			Relation r = new Relation();
			ArrayList<Integer> pos = new ArrayList<Integer>();
			String symbol = operators.get(i).getSymbol();
			String mappedSymbol = operatorSet.getSMTOperator(symbol);
			
			int type = operatorType(symbol);
						
			if(type == LEFT_ONLY || type == BOTH_SIDES)
			{
				firstFor:for(int j = 0 ; j < operands.size() ; j++)
				{
					ArrayList<Integer> positions = operands.get(j).getPositions();
					for(int k = 0 ; k < positions.size() ; k++)
					{
						if(positions.get(k).intValue() == operators.get(i).getPositions().get(0).intValue() - 1)
						{
							before = " " + operands.get(j).getSymbol();
							pos.addAll(positions);								
							operands.remove(j);
							break firstFor;
						}
					}
				}
			}
			
			if(type == RIGHT_ONLY || type == BOTH_SIDES)
			{
				firstFor:for(int j = 0 ; j < operands.size() ; j++)
				{
					ArrayList<Integer> positions = operands.get(j).getPositions();
					for(int k = 0 ; k < positions.size() ; k++)
					{
						if(positions.get(k).intValue() == operators.get(i).getPositions().get(0).intValue() + 1)
						{
							after = " " + operands.get(j).getSymbol();
							pos.addAll(positions);
							operands.remove(j);
							break firstFor;
						}
					}
				}
			}
			if(mappedSymbol.equals(OperatorSet.SUBSETEQ))
			{
				
			}
			
			
			String fullString = "(" + mappedSymbol + before + after + ")";
			r.setSymbol(fullString);
			r.setPositions(pos);
			operands.add(r);
			
		}
		return operands.get(0).getSymbol();
			
	}
	
	/**
	 * It parses the operators 'min' and 'max', according to the ABZ Document.
	 * @param type The substring which is held by the 'max' or 'min' statement, i.e.,
	 * The substring between '(' and ')' that belongs to the operator.
	 * @param operator If it is 'min' or 'max'. Any other string put as parameter
	 * will be saved normally.
	 * @return the name of the variable which represents the parsed operand.
	 * @throws HypothesisException If the String type has not a valid syntax.
	 */
	private String addMinMaxStatement(String type,String operator) throws HypothesisException
	{
		String content = parseHypothesis(type);
		for(int i = 0 ; i < minMaxAssumptions.size() ; i++ )
		{
			if(minMaxAssumptions.get(i).getSmtOp().equals(content))
				return minMaxAssumptions.get(i).getOriginalOp();
		}
		String name = "m" + minMaxAssumptions.size();
		minMaxAssumptions.add(new OperationMappingPlus<String, String, String>(name, content, "is" + operator));
		return name;	
	}
	
	/**
	 * 
	 * @param hypoth
	 * @return
	 * @throws HypothesisException
	 */
	private String parseHypothesis(String hypoth) throws HypothesisException
	{
		String string = "";
		String operator = "";
		int status = NONE;
		int parenthesis = 0;
		ArrayList<String> terms = new ArrayList<String>();
		for(int i = 0 ; i < hypoth.length() ; i++ )
		{
			if(hypoth.charAt(i) == '(')
			{
				if(string.equals("max")||string.equals("min"))
				{
					String set = "";
					++i;
					while(!(hypoth.charAt(i) == ')'))
					{
						set = set + hypoth.charAt(i);
						++i;
					}
					terms.add(addMinMaxStatement(set,string));
					string = "";
					continue;
				}
				else
				{
					parenthesis += 1;
					if(i > 0)
						status = OPERATOR_ONLY;
					operator = String.valueOf(hypoth.charAt(i));
				}
			}
			else if(hypoth.charAt(i) == ')')
			{
				parenthesis -= 1;
				status = ALL_OPERATIONS;
				operator = String.valueOf(hypoth.charAt(i));
			}
			else if(hypoth.charAt(i) == ' ')
			{
				status = ALL_OPERATIONS;
			}
			else if (operatorSet.isOneLengthOperator(hypoth.charAt(i)))
			{
				operator = String.valueOf(hypoth.charAt(i));
				status = OPERANDS_ONLY;
			}
			else if(hypoth.charAt(i) == '{')
			{
				String set = "";
				++i;
				while(!(hypoth.charAt(i) == '}'))
				{
					set = set + hypoth.charAt(i);
					++i;
				}
				String mappedOperand = parseSet(set);
				terms.add(mappedOperand);
				listOfVariables.add(new OperationMapping<String, String>(mappedOperand,PAIRSET));
				string = "";
				operator = "";
			}
			else if(hypoth.charAt(i) == OperatorSet.MIDDLE_POINT)
			{
				listOfVariables.add(new OperationMapping<String, String>(string, string));
				String varAndType = "?" + string + " Int"; 
				terms.add(varAndType);
				
				terms.add(operator);
				string = "";
				continue;
			}
			
			else
			{
				string = string + hypoth.charAt(i);
				status = NONE;
				continue;
			}
			if((status == OPERATOR_ONLY || status == ALL_OPERATIONS) && operatorSet.isOperator(string) )
			{
				terms.add(string);
				string = "";
			}
			if(status == OPERANDS_ONLY || status == ALL_OPERATIONS)
			{
				if(operandSet.isOperand(string))
					{
						string = operandSet.getSMTOperand(string);
						listOfVariables.add(new OperationMapping<String, String>(string, string));					
						terms.add(string);
						string = "";
					}
				else if(isOperand(string))
					{
						terms.add(string);
						string = "";
					} 	
			}
			if(!operator.isEmpty() && !operator.equals(OperatorSet.FORALL))
			{
				terms.add(operator);
				operator = "";
			}			
		}		
		if(operandSet.isOperand(string))
			{
				string = operandSet.getSMTOperand(string);
				listOfVariables.add(new OperationMapping<String, String>(string, string));					
				terms.add(string);
				string = "";
			}
		else if(isOperand(string))
			{
				terms.add(string);
				string = "";
			} 	
		if(!string.equals("") || parenthesis != 0)
			throw new HypothesisException();
		return parseHypothesis(terms);
	}
	
	
	private Object[] split(String string)
	{
		ArrayList<String> p = new ArrayList<String>();
		String temp = "";
		for(int i = 0 ; i < string.length() ; i++)
		{
			if(string.charAt(i) == '|')
			{
				p.add(temp);
				temp = "";
			}
			else
			{
				temp = temp + string.charAt(i);
			}				
		}
		if(!temp.isEmpty())
		{
			p.add(temp);
		}
		return p.toArray();
	}
	
	
	private void parseLemma(Element lemma)
	{
		nameOfLemma = lemma.getElementsByTagName("title").item(0).getTextContent();
		if(nameOfLemma.isEmpty())
		{
			if(!lemma.getElementsByTagName("origin").item(0).getTextContent().isEmpty())
			{
				Object[] origins = split(lemma.getElementsByTagName("origin").item(0).getTextContent());
				if (origins.length > 2)
				{
					nameOfLemma = (String)origins[0] + "-" + (String)origins[2];
				}
				else
				{
					nameOfLemma = (String)origins[0]; 
				}
			}			
		}
		System.out.println(nameOfLemma);
		NodeList typenv = lemma.getElementsByTagName("typenv");
		if(typenv.getLength() > 0)
		{
			parseTypeEnv((Element)(typenv.item(0)));
		}
		NodeList hypothesis = lemma.getElementsByTagName("hypothesis");
		if(hypothesis.getLength() > 0)
		{
			this.setOfHypothesis = new ArrayList<String>();
			for(int i = 0; i < hypothesis.getLength() ; i++ )
			{
				try
				{
					if(onlyTrueHypothesis == true)
					{
						if(((Element)hypothesis.item(i)).getAttribute("needed").equals("true"))
						{
							String tell = parseHypothesis(((Element)hypothesis.item(i)).getTextContent().trim());
							System.out.println(tell);
							setOfHypothesis.add(tell);							
						}
					}		
					else
					{
						String tell = parseHypothesis(((Element)hypothesis.item(i)).getTextContent().trim());
						System.out.println(tell);
						setOfHypothesis.add(tell);	
					}						
				}
				catch(HypothesisException e)
				{
					e.printStackTrace();
					continue;
				}
				
			}
		}
		NodeList goal = lemma.getElementsByTagName("goal");
		if(goal.getLength() > 0)
		{
			try
			{
				parsedGoal = parseGoal((Element)goal.item(0));
				System.out.println(parsedGoal);
			}
			catch(HypothesisException e)
			{
				e = new HypothesisException();
			}
		}
	}
	
	private String parseGoal(Element goal) throws HypothesisException
	{
		String parsedGoal = parseHypothesis(goal.getTextContent().trim());
		parsedGoal = "(not " + parsedGoal + ")";
		return parsedGoal;
	}
	
	public void print()
	{
		System.out.println("Variaveis: " + charMap.toString() );
		System.out.println("Predicados: " + preds.toString() );
		System.out.println("Funcoes: " + funs.toString() );
		System.out.println("Conjuntos: " + sorts.toString() );
	}

	public void setNumberOfLemma(int numberOfLemma) {
		this.numberOfLemma = numberOfLemma;
	}

	public int getNumberOfLemma() {
		return numberOfLemma;
	}
}
