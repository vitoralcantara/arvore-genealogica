package xml_smt_trans;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * 
 */

/**
 * This class is the core of the translation from Rodin-XML format to SMT-LIB format. To make the 
 * translation of a entire document, is necessary to call the class Translator. Each instance of this class makes 
 * the translation of one only lemma.  
 * @author Vitor Alcântara de Almeida
 *
 */
public class LemmaTranslator {
	
	private static final int LEFT_ONLY = 0;
	private static final int RIGHT_ONLY = 1;
	public static final int BOTH_SIDES = 2;
	public static final int NONE = 0;
	public static final int OPERATOR_ONLY = RIGHT_ONLY;
	public static final int ALL_OPERATIONS = BOTH_SIDES;
	public static final int OPERANDS_ONLY = 3;
	public static final int PAIR_SET = NONE;
	public static final int SINGLE_SET = OPERATOR_ONLY;
	public static final int NATURAL = BOTH_SIDES;
	public static final int SINGLE_VARIABLE = 4;
	public static final int INTEGER_VARIABLE = 5;
	public static final int OPERATOR = 6;
	public static final int NOT_DEFINED = 7;
	private boolean onlyTrueHypothesis = false;
	
	private int numberOfLemma;
	
	private ArrayList<Pair<String,String>> charMap;
	private ArrayList<String> sorts,setOfHypothesis;
	//funs: Primeira Variavel: Nome da Variavel
	//funs: Segunda Variavel: Nome do tipo
	//funs: Terceira Variavel: Tipo de Variavel (single var, single set, pair set...)
	private ArrayList<Triple<String,String,Integer>> funs,macrosOfSets,listOfVariables,preds;
	private ArrayList<Triple<String, String, String>> minMaxAssumptions;
	private String nameOfLemma, parsedGoal;
	private OperatorSet operatorSet;
	private OperandSet operandSet;
	
	
	/**
	 * Initializes all the necessary private variables.
	 */
	private void initContext()
	{
		minMaxAssumptions = new ArrayList<Triple<String,String,String>>();
		macrosOfSets = new ArrayList<Triple<String,String,Integer>>();
		operatorSet = new OperatorSet();
		operandSet = new OperandSet();
		charMap = new ArrayList<Pair<String,String>>();
		funs = new ArrayList<Triple<String,String,Integer>>();
		preds = new ArrayList<Triple<String,String,Integer>>();
		sorts = new ArrayList<String>();
		
		listOfVariables = new ArrayList<Triple<String,String,Integer>>();

		sorts.add("Int");
		sorts.add("Bool");
		
		//u+2115: Numeros Naturais
		
		
		
		
	}
	
	/** Constructs the class which the <code>org.w3c.dom.Element</code> which contains the lemma
	 * that will be translated, the argument which decides if only necessary hypothesis will be translated
	 * and the path of the destination folder.	 * 
	 * @param lemma The lemma that will be translated
	 * @param onlyTrueHypothesis If true, hypothesis which does not have the attribute 'needed', or do have it
	 * but it's value is not 'true' won't be translated. If false, all the document will be translated.
	 * @param PATH The folder where the translated file will be saved.
	 * @see Translator
	 */
	public LemmaTranslator()
	{					
	}
	
	public String beginParsing(Element lemma, boolean onlyTrueHypothesis, String PATH,ArrayList<String> givenNames)
	{
		this.onlyTrueHypothesis = onlyTrueHypothesis;
		initContext();		
		parseLemma(lemma);
		return printLemmaOnFile(PATH,givenNames);	
	}
	
	private String checkNameOfFile(ArrayList<String> givenNames, String actualName)
	{
		int i;
		for(i=0 ; i < givenNames.size() ; i++)
		{
			if(actualName.equals(givenNames.get(i)))
			{
				i = givenNames.size() + 1;
			}
		}
		if(i > givenNames.size() )
		{
			int c = 0;
			String newName = actualName + c;
			for(i = 0 ; i < givenNames.size() ; i++)
			{
				if(newName.equals(givenNames.get(i)))
				{
					++c;
					newName = actualName + c;
					i = -1;
				}
			}
			return newName;
		}
		return actualName;		
	}
	
	
	
	/**
	 * This method print all the the translated file to a .SMT file, which
	 * will be saved on the <code>PATH</code> folder.
	 * @param PATH The folder where the translated file will be saved.
	 */
	private String printLemmaOnFile(String PATH, ArrayList<String> givenNames)
	{
		String normalNameOfLemma = nameOfLemma.replace('.', '_');
		normalNameOfLemma = normalNameOfLemma.replace('\\', '_');
		normalNameOfLemma = normalNameOfLemma.replace('/', '_');
		normalNameOfLemma = checkNameOfFile(givenNames, normalNameOfLemma);		
		String benchmark = "(benchmark " + normalNameOfLemma;
		final String FINAL_PATH = PATH + File.separator + normalNameOfLemma + ".smt";
		System.out.println(FINAL_PATH);
		try
		{
			PrintWriter out
			   = new PrintWriter(new BufferedWriter(new FileWriter(FINAL_PATH)));
			out.println(benchmark);
			out.println(":logic UNKNOWN");
			if(!sorts.isEmpty())
			{				
				String extrasorts = ":extrasorts (";
				for(int i = 0 ; i < sorts.size() ; i++)
				{
					extrasorts = extrasorts + " " + sorts.get(i);
				}
				extrasorts = extrasorts + ")";
				out.println(extrasorts);
			}
			
			if(!preds.isEmpty())
			{
				String extrafuns = ":extrapreds (";
				for(int i = 0 ; i < preds.size() ; i++)
				{
					extrafuns = extrafuns + "(" + preds.get(i).getOriginalOp() 
					+ " " + preds.get(i).getSmtOp() + ")";
				}
				extrafuns = extrafuns + ")";
				out.println(extrafuns);
			}
			
			
			if(!funs.isEmpty())
			{
				String extrafuns = ":extrafuns (";
				for(int i = 0 ; i < funs.size() ; i++)
				{
					extrafuns = extrafuns + "(" + funs.get(i).getOriginalOp() 
					+ " " + funs.get(i).getSmtOp() + ")";
				}
				extrafuns = extrafuns + ")";
				out.println(extrafuns);
			}
			
			out.println(":extramacros (");
			out.println("(union (lambda (?p1 ('t boolean)) (?q1 ('t boolean)) . (lambda (?x 't) . (or (?p1 ?x) (?q1 ?x)))))"); //union
			out.println("(emptyset (lambda (?x 't). false))"); //empty
			out.println(";(inter  (lambda (p ('s Bool))(q ('s Bool)) (lambda (?x 's) (and (p ?x) (q ?x)))))"); //inter
			out.println("(setminus (lambda (?p1 ('t boolean)) (?q1 ('t boolean)) . (lambda (?x 't) . (and (?p1 ?x) (not (?q1 ?x))))))");//setminus
			out.println("(in (lambda (?x 't) (?p ('t boolean)) . (?p ?x)))");//in
			out.println("(subseteq (lambda (?p ('t boolean)) (?q ('t boolean)) . (forall (?x 't). (implies (?p ?x) (?q ?x)))))");//subseteq
			out.println("(subset (lambda (?p ('t boolean)) (?q ('t boolean)) . (and (subseteq ?p ?q) 	(not (= ?p ?q)))))");//subset
			out.println("(range (lambda (?i1 Int) (?i2 Int) . (lambda (?i Int) . (and (<= ?i1 ?i) (<= ?i ?i2)))))");//range
			out.println("(Nat (lambda (?i Int) . (<= 0 ?i)))");//natural
			//out.println("(ismin (lambda (m Int) (t (Int Bool)) (and(in m t)(forall (?x Int) (implies (in ?x t)(<= m ?x))))))");
			out.println("(ismax (lambda (?m Int) (?pi (Int boolean)) . (and (?pi ?m)(forall (?i1 Int) . (implies (?pi ?i1) (<= ?i1 ?m))))))");
			//out.println(";(ismax (lambda (?m Int) (?t (Int boolean)) (and(in ?m ?t)(forall (?x Int) . (implies (in ?x ?t)(<=?x ?m))))))");
			out.println(";(ismin (lambda (?m Int) (?t (Int boolean)) (and(in ?m ?t)(forall (?x Int) . (implies (in ?x ?t)(<=?m ?x))))))");
			out.println("(Nat1 (lambda (?i Int) . (<= 1 ?i)))");
			out.println("(couple (lambda (?x 't) (?y 't) . (lambda (?z 't) . (or (= ?z ?x) (= ?z ?y)))))");
			out.println(";(cartesianproduct (lambda (?p ('t1 boolean)) (?q ('t2 boolean)) . (lambda (?x1 't1) (?x2 't2) . (and (?p ?x1) (?q ?x2)))))");
			out.println(";(domain (lambda (?r ('t1 't2 boolean)) . (lambda (?x1 't1) . (exists (?x2 't2) . (?r ?x1 ?x2)))))");
			out.println("(singleton (lambda (?x 't) . (lambda (?y 't) . (= ?x ?y))))");			
			out.println(";(subseteq2 (lambda (?p ('t1 't2 boolean)) (?q ('t1 't2 boolean)) . (forall (?x1 't1) (?x2 't2) . (implies (?p ?x1 ?x2) (?q ?x1 ?x2)))))");
			out.println(";(union2 (lambda (?p2 ('t1 't2 boolean)) (?q2 ('t1 't2 boolean)) . (lambda (?x1 't1) (?x2 't2) . (or (?p2 ?x1 ?x2) (?q2 ?x1 ?x2)))))");
			out.println(";(emptyset2 (lambda (?x 't1) (?y 't2). false))");
			out.println(";(inter2 (lambda (?p ('t1 't2 boolean)) (?q ('t1 't2 boolean)) . (lambda (?x 't1) (?y 't2) . (and (?p ?x ?y) (?q ?x ?y)))))");
			
			
			for(int i = 0 ; i < macrosOfSets.size() ; i++)
			{
				out.println("(" + macrosOfSets.get(i).getOriginalOp() + " " + macrosOfSets.get(i).getSmtOp() + ")" );
			}			
			out.println(")");
			
			for(int i = 0; i < minMaxAssumptions.size() ; i ++ )
			{
				out.println(":assumption (" + minMaxAssumptions.get(i).getLevel() + " " 
						+ minMaxAssumptions.get(i).getOriginalOp()
						+ " " + minMaxAssumptions.get(i).getSmtOp() + ")" );
			}
			
			if(setOfHypothesis != null && !setOfHypothesis.isEmpty())
			{
				for(int i = 0 ; i < setOfHypothesis.size() ; i++)
				{
					out.println(":assumption " + setOfHypothesis.get(i));
				}
			}
			if(!parsedGoal.isEmpty())
			{
				out.println(":formula " + parsedGoal);
			}
			
			out.println(")");
			out.close();			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return nameOfLemma;
	}
	
	/**
	 * This method extracts the type inside a powerset variable, that is,
	 * it returns the string inside a ℙ().  
	 * @param powerSet The String that is a powerset.
	 * @return If powerSet has the form ℙ(), this will return the string inside the parenthesis,
	 * else it only returns powerSet. 
	 */
//	private String getTypeOfPowerSet(String powerSet)
//	{
//		if(powerSet.startsWith("ℙ(") || powerSet.startsWith("POW(") )
//		{
//			String type = powerSet.substring(2, powerSet.length()-1);
//		    System.out.println("O Tipo para o Conjunto das Partes é: " + type);
//		    return type;
//		}
//		return null;
//	}
	private Pair<String, Integer> getTypeOfSet(String type, boolean isSet)
	{
		String[] split = type.split("↔");
		if(split.length == 2)
		{
			type = operandSet.getSMTOperand(split[0]) + "<->" + operandSet.getSMTOperand(split[1]);
			return new Pair<String, Integer>(type, PAIR_SET);
		}
		else
		{
			type = operandSet.getSMTOperand(type);
			if(isSet)
			{
				return new Pair<String, Integer>(type, SINGLE_SET);
			}
			else
			{
				return new Pair<String, Integer>(type, SINGLE_VARIABLE);
			}
				
		}
	}
	
		
	/**
	 * This method parses the variables of the lemma
	 * @param typeEnvironment The element of the lemma Document which contains the variables.
	 */
	private void parseTypeEnv(Element typeEnvironment)
	{
		NodeList variables = typeEnvironment.getElementsByTagName("variable");
		if( variables.getLength() > 0)
		{
			for(int i = 0 ; i < variables.getLength() ; i++ )
			{
				String varName = ((Element)variables.item(i)).getAttribute("name").trim();
				String varType = ((Element)variables.item(i)).getAttribute("type").trim();
//				String[] split = varType.split("↔");
//				if(split.length == 2)
//				{
//					varType = operandSet.getSMTOperand(split[0]) + "<->" + operandSet.getSMTOperand(split[1]);
//				}
//				else
//				{
//					varType = operandSet.getSMTOperand(varType);
//				}
								
				listOfVariables.add(new Triple<String, String,Integer>(varName, varType,0));
			
				
				//Regra 4
				if(varName.equals(varType))
				{
					charMap.add(new Pair<String, String>(varType, varType));
					sorts.add(varType);
				}
				
				//Regra 6
				else if(varType.startsWith("ℙ"))
				{
					if(varType.charAt(1) == '(' && varType.endsWith(")")
					{
						varType = varType.substring(2, varType.length()-1);
						Pair<String, Integer> parsedType = getTypeOfSet(varType, true);
						//varType = operandSet.getSMTOperand(getTypeOfPowerSet(varType));
						if(varName.equals(parsedType.getOriginalOp()))
						{
							charMap.add(new Pair<String, String>(varType, varType));
							sorts.add(varType);
						}
						else
						{
							charMap.add(new Pair<String, String>(varName, varName));
//							preds.add(new Triple<String, String, Integer>(varName, varType, SINGLE_SET);
//							preds.add(new Pair<String, String>(varName, varType));
							
						}					
				}
				
				//Regra 5
				else
				{
					Pair<String, Integer> parsedType = getTypeOfSet(varType, false);
					charMap.add(new Pair<String, String>(varName, varName));
					funs.add(new Triple<String, String, Integer>(varName, parsedType.getOriginalOp(), parsedType.getSmtOp()));
					
//					if(split.length == 2)
//					{
//						funs.add(new Triple<String, String,Integer>(varName,varType,PAIR_SET));
//					}					
//					else
//					{
//						funs.add(new Triple<String, String,Integer>(varName,varType,SINGLE_VARIABLE));
//					}
						
				}				
			}	
		}
				
	}
	
	/**
	 * This method checks if a String is a standard variable, a variable defined on the lemma or 
	 * a number. 
	 * @param chars The String to be checked.
	 * @return True if <code>chars</code> is a standard variable, a variable defined on the lemma or 
	 * a number, False otherwise. 
	 */
	private boolean isOperand(String chars)
	{
		if (Translator.isNumber(chars))
		{
			return true;
		}
		if(chars.startsWith("{") && chars.endsWith("}"))
		{
			return true;
		}
		
		for(int i = 0 ; i < funs.size() ; i++)
		{
			if(chars.equals(funs.get(i).getOriginalOp()))
			{
				return true;
			}		
		}		
		for(int i = 0 ; i < minMaxAssumptions.size() ; i++)
		{
			if(chars.equals(minMaxAssumptions.get(i).getOriginalOp()))
			{
				return true;
			}
		}
		for(int i = 0 ; i < listOfVariables.size() ; i++)
		{
			if(chars.equals(listOfVariables.get(i).getOriginalOp()))
			{
				return true;
			}
			if(chars.startsWith("{") && chars.endsWith("}"))
			{
				return true;
			}			
		}		
		return false;
	}
	
	/**
	 * This method parses sets founds in the hypothesis and in the goal, i.e.,
	 * the substrings contained between '{' and '}'.
	 * @param symbol the substring between '{' and '}'
	 * @return the String which represent the parsed set and the type of variable (single set, pair set or single variable).
	 */
	private Triple<String, Integer,Integer> parseSet(String symbol)
	{
			String[] pieces = symbol.split(",");
			String[] elementOfSets = pieces[0].split(OperatorSet.PAIR_ARROW);
			if(elementOfSets.length == 1)
			{
				if(pieces.length == 1)
				{
					return new Triple<String, Integer,Integer>("(singleton " + pieces[0].trim() + ")", SINGLE_SET,0);
				}
				if(pieces.length == 2)
				{
					return new Triple<String, Integer,Integer>("(couple " + pieces[0].trim() + " " + pieces[1].trim() + ")", SINGLE_SET,0);
					
				}
				else if(pieces.length > 2)
				{
					String type = getTypeOfVariable(pieces[0].trim());
					String macroSet = "(lambda (?elem " + type + ") . or";
					for(int i = 0 ; i < pieces.length ; i++ )
					{
						macroSet = macroSet + " (= ?elem " + pieces[i].trim() + ")";
					}
					macroSet = macroSet + "))";
					for(int i = 0 ; i < macrosOfSets.size() ; i++)
					{
						if(macroSet.equals(macrosOfSets.get(i).getSmtOp()))
						{
							return new Triple<String, Integer,Integer>(macrosOfSets.get(i).getOriginalOp(), SINGLE_SET,0);
						}					
					}
					String name = "enum" +  macrosOfSets.size();
					macrosOfSets.add(new Triple<String, String,Integer>(name, macroSet,SINGLE_SET));
					return new Triple<String, Integer,Integer>(name, SINGLE_SET,0);
				}
			}
			else if(elementOfSets.length == 2)
			{
				String type1 = getTypeOfVariable(elementOfSets[0].trim());
				String type2 = getTypeOfVariable(elementOfSets[1].trim());
				String macroSet = "(lambda (?s1 " + type1 + ") (?s2 " + type2 + ") . ";
				if(pieces.length == 1)
				{
					macroSet = macroSet + "(= pair ?s1 ?s2) (pair " + elementOfSets[0].trim() + " " + elementOfSets[1].trim() + "))))";
				}
				else
				{
					macroSet = macroSet + "(or ";
					for(int k = 0 ; k < pieces.length ; k ++)
					{
						elementOfSets = pieces[k].split(OperatorSet.PAIR_ARROW);
						macroSet = macroSet + "(= (pair ?s1 ?s2) (pair " + elementOfSets[0].trim() + " " + elementOfSets[1].trim() + ")";
					}
					macroSet = macroSet + "))))";
				}
				for(int i = 0 ; i < macrosOfSets.size() ; i++)
				{
					if(macroSet.equals(macrosOfSets.get(i).getSmtOp()))
					{
						return new Triple<String, Integer,Integer>(macrosOfSets.get(i).getOriginalOp(), PAIR_SET,0);
					}					
				}
				String name = "enum" +  macrosOfSets.size();
				macrosOfSets.add(new Triple<String, String,Integer>(name, macroSet,PAIR_SET));
				return new Triple<String, Integer,Integer>(name, PAIR_SET,0);
								
			}				
			return new Triple<String, Integer,Integer>(symbol, SINGLE_VARIABLE,0);
	}
	
	
	/** Returns the type of a variable.
	 * 
	 * @param var the variable.
	 * @return the <code>var</code> type.
	 */
	private String getTypeOfVariable(String var)
	{
		if(Translator.isNumber(var))
		{
			return OperandSet.NATURAL;
		}
		for(int i = 0 ; i < funs.size() ; i++)
		{
			if(var.equals(funs.get(i).getOriginalOp()))
			{
				return funs.get(i).getSmtOp();
			}
		}
		return null;
	}
	
	/**
	 * This method is called through other parseHypothesis method which receives
	 * a String as parameter. this method receives a list with a operand
	 * or operator in each space, in the same order as the hypothesis or the goal
	 * String.
	 * <br></br> 
	 * Before this method is called, it is necessary to parse some special types of operand
	 * and operators, so it is far not recommended to split the hypothesis String
	 * and use this method directly.
	 * <br></br> 
	 * @param hypo the list filled with the operands and operators of the hypothesis
	 * that will be translated, in the same order as it appears in the 
	 * hypothesis and the goal String.
	 * @return
	 * @throws HypothesisException 
	 */
	private String parseHypothesis(ArrayList<Triple<String, Integer,Integer>> hypo) throws HypothesisException
	{
		int parenthesisLevel = 0;
		ArrayList<Relation> operators = new ArrayList<Relation>();
		LinkedList<Relation> operands = new LinkedList<Relation>(); 
		for(int i = 0, j = 0 ; i < hypo.size() ; i++)
		{			
			if(hypo.get(i).getOriginalOp().trim().equals("(")  )
			{
				parenthesisLevel += 1;
			}
			else if(hypo.get(i).getOriginalOp().equals(")")  )
			{
				parenthesisLevel -= 1;
			}
			else if(operatorSet.isOperator(hypo.get(i).getOriginalOp()))
			{
				operators.add(new Relation(hypo.get(i).getOriginalOp(),j,parenthesisLevel,hypo.get(i).getSmtOp()));
				++j;
			}
			else
			{
				Relation s = new Relation(hypo.get(i).getOriginalOp(),j,parenthesisLevel,hypo.get(i).getSmtOp());
				if(needsQuestionMark(s.getSymbol()))
				{
					s.setNeedsQuestionMark(true);
				}
				operands.add(s);
				++j;				
			}
			
		}
		Collections.sort(operators);
		for(int i = 0 ; i < operators.size() ; i++)
		{
			Relation before = new Relation();
			Relation after = new Relation();
			Relation r = new Relation();
			ArrayList<Integer> pos = new ArrayList<Integer>();
			String symbol = operators.get(i).getSymbol();
			String mappedSymbol = operatorSet.getSMTOperator(symbol);
			
			int type = OperatorSet.operatorType(symbol);
						
			if(type == LEFT_ONLY || type == BOTH_SIDES)
			{
				firstFor:for(int j = 0 ; j < operands.size() ; j++)
				{
					ArrayList<Integer> positions = operands.get(j).getPositions();
					for(int k = 0 ; k < positions.size() ; k++)
					{
						if(positions.get(k).intValue() == operators.get(i).getPositions().get(0).intValue() - 1)
						{
							before = operands.get(j);
							//before = " " + operands.get(j).getSymbol();
							pos.addAll(positions);								
							operands.remove(j);
							break firstFor;
						}
					}
				}
			}
			
			if(type == RIGHT_ONLY || type == BOTH_SIDES)
			{
				firstFor:for(int j = 0 ; j < operands.size() ; j++)
				{
					ArrayList<Integer> positions = operands.get(j).getPositions();
					for(int k = 0 ; k < positions.size() ; k++)
					{
						if(positions.get(k).intValue() == operators.get(i).getPositions().get(0).intValue() + 1)
						{
							after = operands.get(j);
							//after = " " + operands.get(j).getSymbol();
							pos.addAll(positions);
							operands.remove(j);
							break firstFor;
						}
					}
				}
			}
			if(before != null && after != null)
			{
				if(type == BOTH_SIDES)
				{
					if(before.getSymbol().equals("emptyset"))
					{
						if(after.getTypeOfRelation().equals(PAIR_SET))
						{
							before.setSymbol(before.getSymbol() + 2);
							before.setTypeOfRelation(PAIR_SET);
						}
					}
					if(after.getSymbol().equals("emptyset"))
					{
						if(before.getTypeOfRelation().equals(PAIR_SET))
						{
							after.setSymbol(after.getSymbol() + 2);
							after.setTypeOfRelation(PAIR_SET);
						}
					}
				}								
				pos.addAll(operators.get(i).getPositions());
				r.setPositions(pos);
				int e = resultTypeOfOperation(before.getTypeOfRelation(),after.getTypeOfRelation(),mappedSymbol,type);
				if((symbol.equals(OperatorSet.SUBSETEQ) || symbol.equals(OperatorSet.UNION) || symbol.equals(OperatorSet.INTER)) && e == PAIR_SET)
				{
					mappedSymbol = mappedSymbol + '2';
					r.setTypeOfRelation(PAIR_SET);
				}
				else
				{
					r.setTypeOfRelation(resultTypeOfOperation(before.getTypeOfRelation(),after.getTypeOfRelation(),mappedSymbol,type));
				}				
				String fullString = "(" + mappedSymbol;
				if(!before.getSymbol().equals(""))
				{
					if(before.isNeedsQuestionMark())
					{
						before.setSymbol("?"+before.getSymbol());
					}
					fullString = fullString + " " + before.getSymbol();
				}
				if(!after.getSymbol().equals(""))
				{
					if(after.isNeedsQuestionMark())
					{
						after.setSymbol("?"+after.getSymbol());
					}
					fullString = fullString + " " + after.getSymbol();
				}
				fullString = fullString + ")";
				r.setSymbol(fullString);
				operands.add(r);
			}
			else
			{
				throw new HypothesisException("Erro grave, operador ficou sem operando");
			}			
		}
		return operands.get(0).getSymbol();
			
	}
	
	private int resultTypeOfOperation(Integer type1,Integer type2,String operator,int sideType)
	{
		operator = operator.trim();
		if(sideType == BOTH_SIDES)
		{
			if(type1.intValue() == SINGLE_SET && type2.intValue() == SINGLE_SET && operator.equals("cartesianproduct"))
			{
				return PAIR_SET;
			}
			else if(type1.intValue() == SINGLE_SET && type2.intValue() == SINGLE_SET)
			{
				return SINGLE_SET;
			}
			else if(type1.intValue() == PAIR_SET && type2.intValue() == PAIR_SET)
			{
				return PAIR_SET;
			}
			else return SINGLE_VARIABLE;
		}
		else if(sideType == RIGHT_ONLY)
		{
			if(operator.equals("domain"))
			{
				return SINGLE_VARIABLE;
			}
			return type2.intValue();
		}
		else return type1.intValue();		
				
	}	
	/**
	 * It parses the operators 'min' and 'max', according to the ABZ Document.
	 * @param type The substring which is held by the 'max' or 'min' statement, i.e.,
	 * The substring between '(' and ')' that belongs to the operator.
	 * @param operator If it is 'min' or 'max'. Any other string put as parameter
	 * will be saved normally.
	 * @return the name of the variable which represents the parsed operand.
	 * @throws HypothesisException If the String type has not a valid syntax.
	 */
	private String addMinMaxStatement(String type,String operator) throws HypothesisException
	{
		String content = parseHypothesis(type);
		for(int i = 0 ; i < minMaxAssumptions.size() ; i++ )
		{
			if(minMaxAssumptions.get(i).getSmtOp().equals(content))
				return minMaxAssumptions.get(i).getOriginalOp();
		}
		String name = "m" + minMaxAssumptions.size();
		funs.add(new Triple<String, String, Integer>(name, "Int", SINGLE_VARIABLE));
		minMaxAssumptions.add(new Triple<String, String, String>(name, content, "is" + operator));
		return name;	
	}
	
	/**
	 * 
	 * @param hypoth
	 * @return
	 * @throws HypothesisException
	 */
	private String parseHypothesis(String hypoth) throws HypothesisException
	{
		String string = "";
		String operator = "";
		int status = NONE;
		int parenthesis = 0;
		ArrayList<Triple<String, Integer,Integer>> terms = new ArrayList<Triple<String,Integer,Integer>>();
		for(int i = 0 ; i < hypoth.length() ; i++ )
		{
			if(hypoth.charAt(i) == '(')
			{
				if(string.equals("max")||string.equals("min"))
				{
					String set = "";
					++i;
					while(!(hypoth.charAt(i) == ')'))
					{
						set = set + hypoth.charAt(i);
						++i;
					}
					terms.add(new Triple<String, Integer,Integer>(addMinMaxStatement(set, string), INTEGER_VARIABLE,0));
					string = "";
					continue;
				}
				else
				{
					parenthesis += 1;
					if(i > 0)
						status = OPERATOR_ONLY;
					operator = String.valueOf(hypoth.charAt(i));
				}
			}
			else if(hypoth.charAt(i) == ')')
			{
				parenthesis -= 1;
				status = ALL_OPERATIONS;
				operator = String.valueOf(hypoth.charAt(i));
			}
			else if(hypoth.charAt(i) == ' ')
			{
				status = ALL_OPERATIONS;
			}
			else if (operatorSet.isOneLengthOperator(hypoth.charAt(i)))
			{
				operator = String.valueOf(hypoth.charAt(i));
				status = OPERANDS_ONLY;
			}
			else if(hypoth.charAt(i) == '{')
			{
				String set = "";
				++i;
				while(!(hypoth.charAt(i) == '}'))
				{
					set = set + hypoth.charAt(i);
					++i;
				}
				Triple<String, Integer,Integer> mappedOperand = parseSet(set);
				terms.add(mappedOperand);
				
				listOfVariables.add(new Triple<String, String,Integer>(mappedOperand.getOriginalOp(),mappedOperand.getOriginalOp(),0));
				string = "";
				operator = "";
			}
			else if(hypoth.charAt(i) == OperatorSet.MIDDLE_POINT)
			{
				listOfVariables.add(new Triple<String, String,Integer>(string, string,1));
				String varAndType = "(?" + string + " Int)";
				listOfVariables.add(new Triple<String, String,Integer>(varAndType, varAndType,0));
				terms.add(new Triple<String, Integer,Integer>(varAndType, SINGLE_VARIABLE,0));
				terms.add(new Triple<String, Integer,Integer>(operator, OPERATOR,0));
				string = "";
				continue;
			}
			else
			{
				string = string + hypoth.charAt(i);
				status = NONE;
				continue;
			}
			if((status == OPERATOR_ONLY || status == ALL_OPERATIONS) && operatorSet.isOperator(string) )
			{
				terms.add(new Triple<String, Integer,Integer>(string, OPERATOR,0));
				string = "";
			}
			if(status == OPERANDS_ONLY || status == ALL_OPERATIONS)
			{
				if(operandSet.isOperand(string))
				{
					string = operandSet.getSMTOperand(string);
					listOfVariables.add(new Triple<String, String,Integer>(string, string,0));					
					terms.add(new Triple<String, Integer,Integer>(string, SINGLE_VARIABLE,0));
					string = "";
				}
				else if(string.trim().length() > 0 && !operator.trim().equals(OperatorSet.FORALL)) 
				{
					Triple<String, String,Integer> var = getOperand(string);
					terms.add(new Triple<String, Integer,Integer>(var.getOriginalOp(),var.getLevel(),0));
					string = "";
				} 	
			}
			if(operator.equals(OperatorSet.FORALL))
			{
				status = NONE;
				continue;
			}
			if(!operator.isEmpty())
			{
				terms.add(new Triple<String, Integer,Integer>(operator, OPERATOR,0));
				operator = "";
			}			
		}		
		if(operandSet.isOperand(string))
			{
				string = operandSet.getSMTOperand(string);
				listOfVariables.add(new Triple<String, String,Integer>(string, string,0));					
				terms.add(new Triple<String, Integer,Integer>(string, SINGLE_VARIABLE,0));
				string = "";
			}
			else if(string.trim().length() > 0)
			{
				Triple<String, String,Integer> var = getOperand(string);
				terms.add(new Triple<String, Integer,Integer>(var.getOriginalOp(),var.getLevel(),0));
				string = "";
			} 	
		if(!string.equals("") || parenthesis != 0)
			throw new HypothesisException();
		return parseHypothesis(terms);
	}

	private Triple<String, String,Integer> getOperand(String string)
	{
		if(Translator.isNumber(string))
		{
			return new Triple<String, String, Integer>(string, string,SINGLE_VARIABLE);
		}
		for(int i = 0 ; i < funs.size() ; i++ )
		{
			if(funs.get(i).getOriginalOp().equals(string))
			{
				return funs.get(i);
			}
		}		
		return new Triple<String, String, Integer>(string, string,SINGLE_VARIABLE);
	}
	
	
	private boolean needsQuestionMark(String variable)
	{
		for(int i = 0 ; i < listOfVariables.size() ; i++)
		{
			if(listOfVariables.get(i).getOriginalOp().equals(variable))
			{
				if(listOfVariables.get(i).getLevel().intValue() == 0)
					return false;
				return true;
			}
		}
		return false;
	}
	
	private Object[] split(String string)
	{
		ArrayList<String> p = new ArrayList<String>();
		String temp = "";
		for(int i = 0 ; i < string.length() ; i++)
		{
			if(string.charAt(i) == '|')
			{
				p.add(temp);
				temp = "";
			}
			else
			{
				temp = temp + string.charAt(i);
			}				
		}
		if(!temp.isEmpty())
		{
			p.add(temp);
		}
		return p.toArray();
	}
	
	
	private void parseLemma(Element lemma)
	{
		nameOfLemma = lemma.getElementsByTagName("title").item(0).getTextContent();
		if(nameOfLemma.isEmpty())
		{
			if(!lemma.getElementsByTagName("origin").item(0).getTextContent().isEmpty())
			{
				Object[] origins = split(lemma.getElementsByTagName("origin").item(0).getTextContent());
				if (origins.length > 2)
				{
					nameOfLemma = (String)origins[0] + "-" + (String)origins[2];
				}
				else
				{
					nameOfLemma = (String)origins[0]; 
				}
			}			
		}
		System.out.println(nameOfLemma);
		NodeList typenv = lemma.getElementsByTagName("typenv");
		if(typenv.getLength() > 0)
		{
			parseTypeEnv((Element)(typenv.item(0)));
		}
		NodeList hypothesis = lemma.getElementsByTagName("hypothesis");
		if(hypothesis.getLength() > 0)
		{
			this.setOfHypothesis = new ArrayList<String>();
			for(int i = 0; i < hypothesis.getLength() ; i++ )
			{
				try
				{
					if(onlyTrueHypothesis == true)
					{
						if(((Element)hypothesis.item(i)).getAttribute("needed").equals("true"))
						{
							String tell = parseHypothesis(((Element)hypothesis.item(i)).getTextContent().trim());
							System.out.println(tell);
							setOfHypothesis.add(tell);							
						}
					}		
					else
					{
						String tell = parseHypothesis(((Element)hypothesis.item(i)).getTextContent().trim());
						System.out.println(tell);
						setOfHypothesis.add(tell);	
					}						
				}
				catch(HypothesisException e)
				{
					e.printStackTrace();
					continue;
				}
				
			}
		}
		NodeList goal = lemma.getElementsByTagName("goal");
		if(goal.getLength() > 0)
		{
			try
			{
				parsedGoal = parseGoal((Element)goal.item(0));
				System.out.println(parsedGoal);
			}
			catch(HypothesisException e)
			{
				e = new HypothesisException();
			}
		}
	}
	
	private String parseGoal(Element goal) throws HypothesisException
	{
		String parsedGoal = parseHypothesis(goal.getTextContent().trim());
		parsedGoal = "(not " + parsedGoal + ")";
		return parsedGoal;
	}
	
	public void print()
	{
		System.out.println("Variaveis: " + charMap.toString() );
		System.out.println("Predicados: " + preds.toString() );
		System.out.println("Funcoes: " + funs.toString() );
		System.out.println("Conjuntos: " + sorts.toString() );
	}

	public void setNumberOfLemma(int numberOfLemma) {
		this.numberOfLemma = numberOfLemma;
	}

	public int getNumberOfLemma() {
		return numberOfLemma;
	}
}
