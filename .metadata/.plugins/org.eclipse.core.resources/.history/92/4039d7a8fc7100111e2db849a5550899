import arvore.Position;
import arvore.generica.LinkedTree;
import arvore.generica.TreeNode;
import arvore.generica.TreePosition;
import arvore.lista.ElementIterator;
import arvore.lista.NodePositionList;
import arvore.lista.PositionList;

public class AdaptadoArvoreGenerica<T> extends LinkedTree<T> implements
		AlvoArvoreGenerica<T> {

	class ParentescoTreeNode<F> extends TreeNode<F> {

		private Parentesco parentesco;

		public Parentesco getParentesco() {
			return parentesco;
		}

		public void setParentesco(Parentesco parentesco) {
			this.parentesco = parentesco;
		}

	}

	private PositionList<Position<T>> pesquisarPrimo(Position<T> p,
			PositionList<Position<T>> primos, int altura, TreePosition<T> father) {
		if (p.element() == null) {
			return primos;
		} else if (altura == 0) {
			TreePosition<T> btp = checkPosition(p);
			if (btp.getParent().equals(father)) {
				return primos;
			}
			primos.addLast(p);
			return primos;
		} else if (altura < 0) {
			return primos;
		} else {
			TreePosition<T> btp = checkPosition(p);
			PositionList<Position<T>> children = btp.getChildren();
			ElementIterator<Position<T>> it = children.iterator();
			while (it.hasNext()) {
				pesquisarPrimo(it.next(), primos, altura - 1, father);
			}
			return primos;
		}
	}

	private int getAltura(Position<T> p) {
		TreePosition<T> btp = checkPosition(p);
		int altura = 0;
		while (!btp.equals(root)) {
			btp = btp.getParent();
			++altura;
		}
		return altura;
	}

	@Override
	public Iterable<Position<T>> primos(Position<T> p)
			throws CoursinNotFoundException {
		TreePosition<T> btp = checkPosition(p);
		TreePosition<T> father = btp.getParent();
		int altura = getAltura(btp);
		PositionList<Position<T>> primos = new NodePositionList<Position<T>>();
		primos = pesquisarPrimo(root, primos, altura, father);
		if(!primos.iterator().hasNext()){
			throw new CoursinNotFoundException("Nï¿½o existe primo");
		}
		return primos;
	}
	

	private Iterable<Position<T>> pegarHerdeiros(Position<T> p,
			PositionList<Position<T>> herdeiros, Integer grau) {
		if (p.element() == null) {
			Parentesco parentesco = new Parentesco(grau.toString(), false);
			ParentescoTreeNode<T> ptn = new ParentescoTreeNode<T>();
			ptn.setParentesco(parentesco);
			herdeiros.addLast(ptn);
			return herdeiros;
		} else {
			Parentesco parentesco = new Parentesco(grau.toString(), true);
			ParentescoTreeNode<T> ptn = new ParentescoTreeNode<T>();
			ptn.setParentesco(parentesco);
			herdeiros.addLast(ptn);
			TreePosition<T> btp = checkPosition(p);
			PositionList<Position<T>> children = btp.getChildren();
			ElementIterator<Position<T>> it = children.iterator();
			while (it.hasNext()) {
				pegarHerdeiros(it.next(), herdeiros, grau + 1);
			}
			return herdeiros;
		}//envie NAO NAO NAO
		
	}

	@Override
	public Iterable<Position<T>> herdeiros(Position<T> p) {
		PositionList<Position<T>> herdeiros = new NodePositionList<Position<T>>();
		return pegarHerdeiros(p, herdeiros, 0);
	}
}
