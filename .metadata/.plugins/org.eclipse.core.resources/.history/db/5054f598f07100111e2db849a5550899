package arvore.binaria;
import java.util.Iterator;

import arvore.EmptyTreeException;
import arvore.NonEmptyTreeException;
import arvore.Position;
import arvore.lista.*;
public class LinkedBinaryTree<T> implements BinaryTree<T> {
	protected BTPosition<T> root;	// reference to the root
	protected int size;		// number of nodes
	/**  Cria uma árvore binária vazia. */
	public LinkedBinaryTree() { 		    
		root = null;  
		size = 0;
	}
	public LinkedBinaryTree(T element) { 		    
		this.addRoot(element);
	}
	/** Retorna o número de nós da árvore. */
	public int size() {
		return size; 
	} 
	public boolean isEmpty() {
		return (size == 0); 
	} 

	public boolean isInternal(Position<T> v) throws InvalidPositionException {
		checkPosition(v);		// auxiliary method
		boolean ok = hasLeft(v) || hasRight(v);
		return (ok);
	}
	public boolean isExternal(Position<T> v) throws InvalidPositionException {
		return !isInternal(v);
	}
	public boolean isRoot(Position<T> v) throws InvalidPositionException { 
		checkPosition(v);
		return (v == root()); 
	}
	public boolean hasLeft(Position<T> v) throws InvalidPositionException { 
		BTPosition<T> vv = checkPosition(v);
		return (vv.getLeft() != null);
	}
	public boolean hasRight(Position<T> v) throws InvalidPositionException { 
		BTPosition<T> vv = checkPosition(v);
		return (vv.getRight() != null);
	}
	public Position<T> root() throws EmptyTreeException {
		if (root == null)
			throw new EmptyTreeException("The tree is empty");
		return root;
	} 
	public Position<T> leftChild(Position<T> v) throws InvalidPositionException, BoundaryViolationException { 
		BTPosition<T> vv = checkPosition(v);
		Position<T> leftPos = vv.getLeft();
		if (leftPos == null)
			throw new BoundaryViolationException("No left child");
		return leftPos;
	}
	public Position<T> rightChild(Position<T> v) throws InvalidPositionException, BoundaryViolationException { 
		BTPosition<T> vv = checkPosition(v);
		Position<T> rightPos = vv.getRight();
		if (rightPos == null)
			throw new BoundaryViolationException("No right child");
		return rightPos;
	}  
	public Position<T> parent(Position<T> v) throws InvalidPositionException, BoundaryViolationException { 
		BTPosition<T> vv = checkPosition(v);
		Position<T> parentPos = vv.getParent();
		if (parentPos == null)
			throw new BoundaryViolationException("No parent");
		return parentPos; 
	}
	public Iterable<Position<T>> children(Position<T> v) throws InvalidPositionException { 
		PositionList<Position<T>> children = new NodePositionList<Position<T>>();
		if (hasLeft(v))
			children.addLast(leftChild(v));
		if (hasRight(v))
			children.addLast(rightChild(v));
		return children;
	}
	public Iterable<Position<T>> positions() {
		PositionList<Position<T>> positions = new NodePositionList<Position<T>>();
		if(size != 0)
			//preorderPositions(root(), positions);  // assign positions in preorder
			inorderPositions(root(), positions);  // assign positions in preorder
		return positions;
	} 
	public ElementIterator<T> iterator() {
		return null;
	}
	public T replace(Position<T> v, T o) throws InvalidPositionException {
		BTPosition<T> vv = checkPosition(v);
		T temp = v.element();
		vv.setElement(o);
		return temp;
	}
	public Position<T> sibling(Position<T> v) throws InvalidPositionException, BoundaryViolationException {
		BTPosition<T> vv = checkPosition(v);
		BTPosition<T> parentPos = vv.getParent();
		if (parentPos != null) {
			BTPosition<T> sibPos;
			BTPosition<T> leftPos = parentPos.getLeft();
			if (leftPos == vv)
				sibPos = parentPos.getRight();
			else
				sibPos = parentPos.getLeft();
			if (sibPos != null)
				return sibPos;
		}
		throw new BoundaryViolationException("No sibling");
	}
	public Position<T> addRoot(T e) throws NonEmptyTreeException {
		if(!isEmpty())
			throw new NonEmptyTreeException("Tree already has a root");
		size = 1;
		root = createNode(e,null,null,null);
		return root;
	}
	public Position<T> insertLeft(Position<T> v, T e) throws InvalidPositionException {
		BTPosition<T> vv = checkPosition(v);
		Position<T> leftPos = vv.getLeft();
		if (leftPos != null)
			throw new InvalidPositionException("Node already has a left child");
		BTPosition<T> ww = createNode(e, vv, null, null);
		vv.setLeft(ww);
		size++;
		return ww;
	}
	public Position<T> insertRight(Position<T> v, T e)	throws InvalidPositionException {
		BTPosition<T> vv = checkPosition(v);
		Position<T> rightPos = vv.getRight();
		if (rightPos != null)
			throw new InvalidPositionException("Node already has a right child");
		BTPosition<T> w = createNode(e, vv, null, null);
		vv.setRight(w);
		size++;
		return w;
	}
	public T remove(Position<T> v) throws InvalidPositionException {
		BTPosition<T> noARemover = checkPosition(v);
		BTPosition<T> filhoEsquerdo = noARemover.getLeft();
		BTPosition<T> filhoDireito = noARemover.getRight();
		if (filhoEsquerdo != null && filhoDireito != null)
			throw new InvalidPositionException("Não remove um nó com dois filhos");
		BTPosition<T> filho; 	// qualquer filho de noARemover se existir.
		if (filhoEsquerdo != null)
			filho = filhoEsquerdo;
		else if (filhoDireito != null)
			filho = filhoDireito;
		else 		
			filho = null;
		if (noARemover == root) { 	// noARemover é root.
			if (filho != null)
				filho.setParent(null);
			root = filho;
		}
		else { 		// noARemover não é root.
			BTPosition<T> pai = noARemover.getParent();
			if (noARemover == pai.getLeft())
				pai.setLeft(filho);
			else
				pai.setRight(filho);
			if(filho != null)
				filho.setParent(pai);
		}
		size--;
		return v.element();
	}

	public void attach(Position<T> v, BinaryTree<T> T1, BinaryTree<T> T2) throws InvalidPositionException {
		BTPosition<T> vv = checkPosition(v);
		if (isInternal(v))
			throw new InvalidPositionException("Cannot attach from internal node");
		if (!T1.isEmpty()) {
			BTPosition<T> r1 = checkPosition(T1.root());
			vv.setLeft(r1);
			r1.setParent(vv);		// T1 should be invalidated
		}
		if (!T2.isEmpty()) {
			BTPosition<T> r2 = checkPosition(T2.root());
			vv.setRight(r2);
			r2.setParent(vv);		// T2 should be invalidated
		}
	}
	public void swapElements(Position<T> v, Position<T> w) throws InvalidPositionException {
		BTPosition<T> vv = checkPosition(v);
		BTPosition<T> ww = checkPosition(w);
		T temp = w.element();
		ww.setElement(v.element());
		vv.setElement(temp);	
	}
	public void expandExternal(Position<T> p, T l, T r) throws InvalidPositionException {
		if (!isExternal(p)) 
			throw new InvalidPositionException("Node is not external");
		insertLeft(p, l);
		insertRight(p, r);
	}
	public void removeAboveExternal(Position<T> v) throws InvalidPositionException {
		if (!isExternal(v)) 
			throw new InvalidPositionException("Node is not external");
		if (isRoot(v))
			remove(v);
		else {
			Position<T> u = parent(v);
			remove(v);
			remove(u);
		}
	}
	public BTPosition<T> checkPosition(Position<T> v) throws InvalidPositionException {
		if (v == null || !(v instanceof BTPosition))
			throw new InvalidPositionException("The position is invalid");
		return (BTPosition<T>) v;
	}

	public BTPosition<T> createNode(T element, BTPosition<T> parent,BTPosition<T> left, BTPosition<T> right) {
		return new BTNode<T>(element,parent,left,right); }
	/** Creates a list storing the the nodes in the subtree of a node,
	 * ordered according to the preorder traversal of the subtree. */
	protected void preorderPositions(Position<T> v, PositionList<Position<T>> pos)	throws InvalidPositionException {
		pos.addLast(v);
		if (hasLeft(v))
			preorderPositions(leftChild(v), pos);	// recurse on left child
		if (hasRight(v))
			preorderPositions(rightChild(v), pos);	// recurse on right child
	}
	protected void inorderPositions(Position<T> v, PositionList<Position<T>> pos) throws InvalidPositionException {
		if (hasLeft(v))
			inorderPositions(leftChild(v), pos);  // recurse on left child
		if (v.element()!= null)
			pos.addLast(v);
		if (hasRight(v))
			inorderPositions(rightChild(v), pos); // recurse on right child
	}
}


