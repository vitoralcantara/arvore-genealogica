package visual;

import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import xml_smt_trans.Translator;



public class VisualOpening extends javax.swing.JFrame {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = -5721931396898728489L;
	/** Creates new form Find */
    public VisualOpening() {
        initComponents();
        FileNameExtensionFilter fl = new FileNameExtensionFilter("Rodin Filea (xml)", "xml");
        jRodinFileChooser.addChoosableFileFilter(fl);
        jListRodinFiles.setModel(new DefaultListModel());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jRodinFileChooser = new javax.swing.JFileChooser();
        jDestinationChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxSameFolder = new javax.swing.JCheckBox();
        jButtonBrowseRodinFiles = new javax.swing.JButton();
        jButtonBrowseSMTFolder = new javax.swing.JButton();
        jTextFieldDestinationField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxOnlyNeededHypothesis = new javax.swing.JCheckBox();
        jButtonBeginParsing = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListRodinFiles = new javax.swing.JList();
        jButtonClearAll = new javax.swing.JButton();
        jButtonClearSelectedFiles = new javax.swing.JButton();

        jRodinFileChooser.setDialogTitle("Search Rodin Files");
        jRodinFileChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jRodinFileChooser.setInheritsPopupMenu(true);
        jRodinFileChooser.setMultiSelectionEnabled(true);

        jDestinationChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rodin to SMT Translator");
        setLocationByPlatform(true);

        jLabel1.setText("Rodin XML File:");

        jCheckBoxSameFolder.setText("Save in the same folder");
        jCheckBoxSameFolder.setToolTipText("The folder where are the Rodin XML Files will be the same folder for the translated files");
        jCheckBoxSameFolder.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSameFolder.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxSameFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSameFolderActionPerformed(evt);
            }
        });

        jButtonBrowseRodinFiles.setText("Add...");
        jButtonBrowseRodinFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseRodinFilesActionPerformed(evt);
            }
        });

        jButtonBrowseSMTFolder.setText("Browse");
        jButtonBrowseSMTFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseSMTFolderActionPerformed(evt);
            }
        });

        jTextFieldDestinationField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextFieldDestinationField.setFocusable(false);
        jTextFieldDestinationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDestinationFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Destination Folder:");

        jCheckBoxOnlyNeededHypothesis.setText("Parse only needed Hypothesis");
        jCheckBoxOnlyNeededHypothesis.setToolTipText("The hypothesis which are not marked as needed won't be translated");
        jCheckBoxOnlyNeededHypothesis.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxOnlyNeededHypothesis.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxOnlyNeededHypothesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxOnlyNeededHypothesisActionPerformed(evt);
            }
        });

        jButtonBeginParsing.setText("Begin Parsing");
        jButtonBeginParsing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBeginParsingActionPerformed(evt);
            }
        });

        jListRodinFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(jListRodinFiles);

        jButtonClearAll.setText("Clear All");
        jButtonClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearAllActionPerformed(evt);
            }
        });

        jButtonClearSelectedFiles.setText("Clear Selected Files");
        jButtonClearSelectedFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearSelectedFilesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                            .add(jTextFieldDestinationField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)))
                    .add(jCheckBoxOnlyNeededHypothesis)
                    .add(jCheckBoxSameFolder))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButtonBrowseRodinFiles, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .add(jButtonBrowseSMTFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .add(jButtonClearSelectedFiles, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonClearAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .add(jButtonBeginParsing, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jButtonBrowseRodinFiles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButtonClearSelectedFiles)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonClearAll)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 44, Short.MAX_VALUE))
                    .add(jLabel1)
                    .add(jScrollPane2))
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(jTextFieldDestinationField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2)
                        .add(jButtonBrowseSMTFolder)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jCheckBoxSameFolder)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCheckBoxOnlyNeededHypothesis))
                    .add(jButtonBeginParsing))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("It's Program which translates Rodin files (xml) to the SMT-LIB format (to be used in E-Provers).\n");

        pack();
    }// </editor-fold>

    private void jCheckBoxSameFolderActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void jCheckBoxOnlyNeededHypothesisActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        // TODO add your handling code here:
    }                                                             

    private void jButtonBeginParsingActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO Codigo do Botão Parse
        DefaultListModel dlm = (DefaultListModel)jListRodinFiles.getModel();
        if(dlm.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "It's necessary to have at least one Rodin file selected!");
        }
        else if((jTextFieldDestinationField.getText().equals("")) && (!jCheckBoxSameFolder.isSelected()))
        {
            JOptionPane.showMessageDialog(this, "It's necessary to choose the destination folder or choose the" +
                    " option \"Save in the same folder\"!");
        }
        else if(jCheckBoxSameFolder.isSelected())
        {
        	for(int i = 0 ; i < dlm.getSize() ; i++)
        	{
        		File RodinXML = (File)dlm.get(i);
        		String dir = RodinXML.getParent();
        		Translator.parseFile(RodinXML, dir , jCheckBoxOnlyNeededHypothesis.isSelected());
        	}
        }
        else
        {
        	for(int i = 0 ; i < dlm.getSize() ; i++)
        	{
        		File RodinXML = (File)dlm.get(i);
        		Translator.parseFile(RodinXML, jTextFieldDestinationField.getText(), jCheckBoxOnlyNeededHypothesis.isSelected());
        	}
        	JOptionPane.showMessageDialog(this, "Translation well done!!!");
        }
        
        	
    }                                                   

    private void jButtonBrowseRodinFilesActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
        int returnVal = jRodinFileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION )
        {
            DefaultListModel dlm = (DefaultListModel)jListRodinFiles.getModel();
            File[] rodinFiles = jRodinFileChooser.getSelectedFiles();
            for(int i = 0 ; i < rodinFiles.length ; i++)
            {
                dlm.addElement(rodinFiles[i]);
            }
            jListRodinFiles.setModel(dlm);
        }
        

        /*String[] rodinFilesPath = new String[rodinFiles.length];
        *for(int i = 0 ; i < rodinFiles.length ; i++)
        *{
        *    rodinFilesPath[i] = rodinFiles[i].getPath();
        *}
        */

        
    }                                                       

    private void jTextFieldDestinationFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        // TODO add your handling code here:
    }                                                          

    private void jButtonClearAllActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        jListRodinFiles.setModel(new DefaultListModel());
    }

    private void jButtonClearSelectedFilesActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Object[] selectedObjects = jListRodinFiles.getSelectedValues();
        File[] selectedFiles = new File[selectedObjects.length];
        for(int i = 0 ; i < selectedObjects.length ; i++)
        {
            selectedFiles[i] = (File)selectedObjects[i];
        }
        DefaultListModel dlm = (DefaultListModel)jListRodinFiles.getModel();
        for(int i = 0 ; i < selectedFiles.length ; i++)
        {
            dlm.removeElement(selectedFiles[i]);
        }
        jListRodinFiles.setModel(dlm);
    }

    private void jButtonBrowseSMTFolderActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnVal = jDestinationChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            jTextFieldDestinationField.setText(jDestinationChooser.getSelectedFile().getPath());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualOpening().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton jButtonBeginParsing;
    private javax.swing.JButton jButtonBrowseRodinFiles;
    private javax.swing.JButton jButtonBrowseSMTFolder;
    private javax.swing.JButton jButtonClearAll;
    private javax.swing.JButton jButtonClearSelectedFiles;
    private javax.swing.JCheckBox jCheckBoxOnlyNeededHypothesis;
    private javax.swing.JCheckBox jCheckBoxSameFolder;
    private javax.swing.JFileChooser jDestinationChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jListRodinFiles;
    private javax.swing.JFileChooser jRodinFileChooser;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldDestinationField;
    // End of variables declaration
    
}
