import java.util.ArrayList;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * 
 */

/**
 * @author Vitor
 *
 */
public class LemmaTranslator {
	
	private ArrayList<OperationMapping> stdCharMap,charMap,listOfVariables,preds,funs;
	private ArrayList<String> sorts,assumptions,formula,setOfHypothesis;
	private String nameOfLemma;
	
	
	public LemmaTranslator(Element lemma)
	{
		initContext();
		parseLemma(lemma);
	}
	
	
	
	
	private String getMappedOperation(String op)
	{
		for(int i = 0 ; i < stdCharMap.size() ; i++ )
		{
			if(op.equals(stdCharMap.get(i).getOriginalOp()))
			{
				return stdCharMap.get(i).getSmtOp();
			}
		}
		for(int i = 0 ; i < charMap.size() ; i++ )
		{
			if(op.equals(charMap.get(i).getOriginalOp()))
			{
				return charMap.get(i).getSmtOp();
			}
		}
		return null;
	}
	
	private String getType(String powerSet)
	{
		if(powerSet.startsWith("ℙ(") || powerSet.startsWith("POW(") )
		{
			String type = powerSet.substring(2, powerSet.length()-1);
		    System.out.println("O Tipo para o Conjunto das Partes é: " + type);
		    return type;
		}
		return null;
	}
		
	private void parseTypeEnv(Element typeEnvironment)
	{
		NodeList variables = typeEnvironment.getElementsByTagName("variable");
		if( variables.getLength() > 0)
		{
			for(int i = 0 ; i < variables.getLength() ; i++ )
			{
				String varName = ((Element)variables.item(i)).getAttribute("name");
				String varType = ((Element)variables.item(i)).getAttribute("type");
				
				listOfVariables.add(new OperationMapping(varName, varType));
				
				//Regra 4
				if(varName.equals(varType))
				{
					charMap.add(new OperationMapping(varType, varType));
					sorts.add(varType);
				}
				
				//Regra 6
				else if(varType.startsWith("ℙ(") || varType.startsWith("POW(") )
				{
					charMap.add(new OperationMapping(varName, varName));
					preds.add(new OperationMapping(varName, getType(varType)));
					
				}
				
				//Regra 5
				else
				{
					charMap.add(new OperationMapping(varName, varName));
					funs.add(new OperationMapping(varName,varType));					
				}				
			}	
		}
				
	}
	
	private void parseHypothesis(Element hypothesis)
	{
		
		
	}
	
	
	private void parseLemma(Element lemma)
	{
		listOfVariables = new ArrayList<OperationMapping>();
		nameOfLemma = lemma.getElementsByTagName("title").item(0).getTextContent();
		System.out.println(nameOfLemma);
		NodeList typenv = lemma.getElementsByTagName("typenv");
		if(typenv.getLength() > 0)
		{
			parseTypeEnv((Element)(typenv.item(0)));
		}
		NodeList hypothesis = lemma.getElementsByTagName("hypothesis");
		if(hypothesis.getLength() > 0)
		{
			this.setOfHypothesis = new ArrayList<String>();
			for(int i = 0; i < hypothesis.getLength() ; i++ )
			{
				parseHypothesis((Element)hypothesis.item(i));
			}
		}
		
		
		
		
		
		
		
	}
	
	public void print()
	{
		System.out.println("Variaveis: " + charMap.toString() );
		System.out.println("Predicados: " + preds.toString() );
		System.out.println("Funcoes: " + funs.toString() );
		System.out.println("Conjuntos: " + sorts.toString() );
	}
	
	
	
	
	
	private void initContext()
	{
		stdCharMap = new ArrayList<OperationMapping>();
		charMap = new ArrayList<OperationMapping>();
		funs = new ArrayList<OperationMapping>();
		preds = new ArrayList<OperationMapping>();
		assumptions = new ArrayList<String>();
		formula = new ArrayList<String>();		
		sorts = new ArrayList<String>();
		
		sorts.add("Int");
		sorts.add("Bool");
		
		stdCharMap.add(new OperationMapping("Z", "Int"));
		stdCharMap.add(new OperationMapping("INTEGER", "Int"));
		stdCharMap.add(new OperationMapping("ℤ", "Int"));
		stdCharMap.add(new OperationMapping("BOOL", "Bool"));
		stdCharMap.add(new OperationMapping("TRUE", "True"));
		stdCharMap.add(new OperationMapping("FALSE", "False"));
		stdCharMap.add(new OperationMapping("", "and"));
		stdCharMap.add(new OperationMapping("", "or"));
		stdCharMap.add(new OperationMapping("", "implies"));
		stdCharMap.add(new OperationMapping("", "iff"));
		stdCharMap.add(new OperationMapping("", "exists"));
		stdCharMap.add(new OperationMapping("", "forall"));
		stdCharMap.add(new OperationMapping("=", "="));
		stdCharMap.add(new OperationMapping("<", "<"));
		stdCharMap.add(new OperationMapping("", "<="));
		stdCharMap.add(new OperationMapping(">", ">"));
		stdCharMap.add(new OperationMapping("", ">="));
		stdCharMap.add(new OperationMapping("", "subset"));
		stdCharMap.add(new OperationMapping("", "subseteq"));
		stdCharMap.add(new OperationMapping("", "in"));
		stdCharMap.add(new OperationMapping("+", "+"));
		stdCharMap.add(new OperationMapping("", "*"));
		stdCharMap.add(new OperationMapping("div", "/"));
		stdCharMap.add(new OperationMapping("mod", "%"));
		stdCharMap.add(new OperationMapping("-", "-"));
		stdCharMap.add(new OperationMapping("", "union"));
		stdCharMap.add(new OperationMapping("", "inter"));
		stdCharMap.add(new OperationMapping("\\", "setminus"));
		stdCharMap.add(new OperationMapping("", "empty"));
	}

}
