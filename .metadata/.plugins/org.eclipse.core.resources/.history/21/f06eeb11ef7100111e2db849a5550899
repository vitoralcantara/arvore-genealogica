import java.util.ArrayList;
import java.util.List;

import arvore.Position;
import arvore.binaria.BTPosition;
import arvore.generica.LinkedTree;
import arvore.generica.TreePosition;
import arvore.lista.BoundaryViolationException;
import arvore.lista.ElementIterator;
import arvore.lista.NodePositionList;
import arvore.lista.PositionList;

public class AdaptadoArvoreGenerica<T> extends LinkedTree<T> implements
		AlvoArvoreGenerica<T> {

	private PositionList<Position<T>> pesquisarPrimo(Position<T> p,
			PositionList<Position<T>> primos, int altura) {
		if (p == null) {
			return primos;
		} else if (altura == 0) {
			primos.addLast(p);
			return primos;
		} else if (altura < 0) {
			return primos;
		} else {
			TreePosition<T> btp = checkPosition(p);
			PositionList<Position<T>> children = btp.getChildren();
			ElementIterator<Position<T>> it = children.iterator();
			while (it.hasNext()) {
				pesquisarPrimo(it.next(), primos, altura - 1);
			}
			return primos;
		}
	}

	private int getAltura(Position<T> p) {
		TreePosition<T> btp = checkPosition(p);
		int altura = 0;
		while (!btp.equals(root)) {
			btp = btp.getParent();
			++altura;
		}
		return altura;
	}

	@Override
	public Iterable<Position<T>> primos(Position<T> p)
			throws CoursinNotFoundException {
		// lista de iteradores com os primos de um determinado no
		TreePosition<T> btp = checkPosition(p);
		int altura = getAltura(btp);
		PositionList<Position<T>> primos = new NodePositionList<Position<T>>();
		primos = pesquisarPrimo(root, primos, altura);
		return primos;
	}

	private void Iterable<Position<T>> pegarHerdeiros(Position<T> p,PositionList<Position<T>> herdeiros){
		if (p == null) {
			return herdeiros;
		} else if (altura == 0) {
			primos.addLast(p);
			return primos;
		} else if (altura < 0) {
			return primos;
		} else {
			TreePosition<T> btp = checkPosition(p);
			PositionList<Position<T>> children = btp.getChildren();
			ElementIterator<Position<T>> it = children.iterator();
			while (it.hasNext()) {
				pesquisarPrimo(it.next(), primos, altura - 1);
			}
			return primos;
		}
	}
	
	@Override
	public Iterable<Position<T>> herdeiros(Position<T> p) {
		// herdeiros- de acordo com c—d civil art 1829,IV 
		//retorna um iterador para os herdeiros dado de uma determinada posi�‹o
		//dica listar os herdeiros vivos (parentesco class)
		
		
		
		List<Position<T>> c = 
		return null;
	}
}
