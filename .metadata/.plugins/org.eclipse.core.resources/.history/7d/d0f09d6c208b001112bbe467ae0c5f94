package agents;

import jade.core.Agent;
import jade.core.behaviours.Behaviour;

import java.awt.Point;
import java.util.HashSet;
import java.util.Vector;

import ant.Perceive;
import ant.Perceive.Type;
import ant.World;
import bdi.Belief;
import bdi.Desire;
import bdi.Intention;
import bdi.Intention.Estado;

@SuppressWarnings("serial")
public class AgenteBDI extends Agent {

	@Override
	protected void setup() {
		addBehaviour(new Behaviour_AgCognitivo(getLocalName()));
		super.setup();
	}

	@Override
	protected void takeDown() {

		super.takeDown();
	}
}

@SuppressWarnings("serial")
class Behaviour_AgCognitivo extends Behaviour {

	String nameAgent;

	public Behaviour_AgCognitivo(String n) {
		nameAgent = n;
	}

	/**
	 * Desejo: ter todos os recursos do ambiente.
	 * 
	 * Intenção: Capturar os recursos 1 a 1.
	 * 
	 * Crença: O que ele visualizar ao redor (percepção)
	 */
	@Override
	public void action() {

		Belief B;
		Intention I;
		Desire D;

		Belief B0 = new Belief();
		Intention I0 = new Intention();

		B = B0;
		I = I0;

		while (true) {
			// get next percept p via sensors
			HashSet<Perceive> p = World.getInstance().perceive(nameAgent);
			B = brf(B, p);
			D = options(B, I);
			I = filter(B, D, I);
			Vector<Point> pi = plan(B, I);
			while (!(empty(pi) || succeeded(I, B) || impossible(I, B))) {
				Point alfa = first(pi);
				execute(alfa);
				pi = tail(pi);
				p = World.getInstance().perceive(nameAgent);
				B = brf(B, p);
				if (reconsider(I, B)) {
					D = options(B, I);
					I = filter(B, D, I);
				}
				if (!sound(pi, I, B)) {
					pi = plan(B, I);
				}
			}
		}
	}

	private boolean sound(Vector<Point> pi, Intention i, Belief b) {
		// TODO
		return true;
	}

	private boolean reconsider(Intention i, Belief b) {
		// TODO
		return false;
	}

	private Vector<Point> tail(Vector<Point> pi) {
		pi.removeElementAt(0);
		return pi;
	}

	private void execute(Point alfa) {
		World.getInstance().move(nameAgent, alfa.x, alfa.y);
	}

	private Point first(Vector<Point> pi) {
		return pi.firstElement();
	}

	private boolean impossible(Intention i, Belief b) {
		return i.planoImpossivel();
	}

	private boolean succeeded(Intention i, Belief b) {
		if (i.getEstado() == Estado.COLETAR) {
			i.setOperacaoCompletadaComSucesso(true);
			return World.getInstance().collect(nameAgent);
		} else {
			i.setOperacaoCompletadaComSucesso(true);
			return World.getInstance().dellivery(nameAgent);
		}
	}

	private boolean empty(Vector<Point> pi) {
		return pi.isEmpty();
	}

	private Vector<Point> plan(Belief b, Intention i) {
		Vector<Point> plan = SearchAStar.search(b.getAgentPosition().local,
				i.getResource().local, b.getObstaculos(),
				b.getDimensaoDoMundo());
		if (plan.isEmpty()) {
			i.setPlanoImpossivel();
		}
		return plan;
	}

	private Intention filter(Belief b, Desire d, Intention i) {
		if (i.operacaoCompletadaComSucesso()) {
			if (i.getEstado() == Estado.COLETAR) {
				i.setEstado(Estado.DEVOLVER);
			} else {
				i.setEstado(Estado.COLETAR);
			}
		}
		if (i.operacaoCompletadaComSucesso() || i.getResource() == null) {
			if (i.getEstado() == Estado.COLETAR) {
				i.setResource(d.getFirstResouceFromList());
			} else {
				i.setResource(b.getColony());
			}

			i.setResource(d.getFirstResouceFromList());
		}
		return i;
	}

	private Desire options(Belief b, Intention i) {
		Desire d = new Desire();
		for (Perceive p : b.getPerceptions()) {
			if (p.type == Type.Resource) {
				d.add(p);
			}
		}
		return d;
	}

	private Belief brf(Belief b, HashSet<Perceive> p) {
		Perceive agentPosition = null;
		Point colony = null;
		HashSet<Point> obstaculos = new HashSet<Point>();

		for (Perceive perception : p) {
			b.add(perception);
			if (perception.type == Type.Position) {
				agentPosition = perception;
			} else if (perception.type == Type.Obstacle) {
				obstaculos.add(perception.local);
			} else if (perception.type == Type.Colony) {
				colony = perception.local;
			}
		}
		b.setAgentPosition(agentPosition);
		b.setObstaculos(obstaculos);
		b.setColony(colony);
		b.setTamanhoDoMundo(World.getInstance().dimension,
				World.getInstance().dimension);
		return b;
	}

	@Override
	public boolean done() {
		return false;
	}
}
