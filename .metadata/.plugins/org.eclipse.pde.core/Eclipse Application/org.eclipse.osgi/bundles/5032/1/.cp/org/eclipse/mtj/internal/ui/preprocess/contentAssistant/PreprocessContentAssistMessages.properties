###############################################################################
# Copyright (c) 2008 Sybase Corporation .
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     Gang Ma (Sybase) - initial API and implementation
###############################################################################

# preprocess proposal
# The first argument is the name and the second is the description
PreprocessProposal_displayString= {0} - {1}

# preprocess directive description
condition_desc=mark the source file
debug_desc=debug next line
define_desc=define temporary symbol
elif_desc=otherwise evaluate an expression
elifdef_desc=otherwise check whether symbol is defined
elifndef_desc=otherwise check whether symbol is not defined
else_desc=otherwise
enddebug_desc=close the 'mdebug' block
endif_desc=close the block
expand_desc=expand the directive
if_desc=evaluate an expression
ifdef_desc=check whether symbol is defined
ifndef_desc=check whether symbol is not defined
mdebug_desc=debug multi lines
undefine_desc=undefine the symbol

# preprocess directive java doc
condition_javadoc=The identifier represents a variable of any type (boolean, string, or integer) and checks whether or not the variable is defined. If true (the variable is defined), the code that follows is processed. Nested blocks are processed as well. If false (the variable is not defined), the code that follows is commented and nested blocks are not evaluated. The directive must be closed with #endif.
debug_javadoc=Determines if the line following the directive should be commented or uncommented based on the debug level set in Compiling page of the project properties. If the debug level is omitted and the debug level is not set to "Off" in the project properties, the preprocessor will automatically debug the line in question. Used for debugging purposes with expressions such as System.out.println, for example. This directive can be nested.
define_javadoc=#define [identifier=value] #define [identifier value] Adds temporary abilities or variables to the preprocessor memory. Can not be used in nested blocks. Global variables defined in the project configuration properties override these temporary variables
elif_javadoc=Works as a standard else if statement and can complement only in blocks started by an if statement. The directive preprocesses the code that follows based on the result of the expression.
elifdef_javadoc=Works as a standard else if statement, but automatically checks whether or not the identifier is defined. The directive can only complement inside blocks started by ifdef/ifndef.
elifndef_javadoc=Works as a standard else if statement but automatically checks whether the identifier is not defined. The directive can only complement inside blocks started by ifdef/ifndef.
else_javadoc=Works as a standard else statement only preprocesses the code that follows when none of the previous conditions in the defining block were true. Complements inside any block started with the if/ifdef/ifndef directive.
enddebug_javadoc=Must terminate #mdebug block.
endif_javadoc=This directive must be used to close any block started with if/ifdef/ifndef.
expand_javadoc=Expand directive is used to replace build time defines in the code.You can have a line like:<BR>//#expand public static int VERSION = %VERSION%;<BR><BR>which will, assuming you have the define VERSION=5, be replaced with the two lines:<BR>//#expand public static int VERSION = %VERSION%;<BR>public static int VERSION = 5;<BR>
if_javadoc=Evaluates an expression passed to it and fires the appropriate action. The directive must be closed with endif.
ifdef_javadoc=The identifier represents a variable of any type (boolean, string, or integer) and checks whether or not the variable is defined. If true (the variable is defined), the code that follows is processed. Nested blocks are processed as well. If false (the variable is not defined), the code that follows is commented and nested blocks are not evaluated. The directive must be closed with #endif.
ifndef_javadoc=Works in the same manner as ifdef, but returns "True" if the variable is not defined. The directive must be closed with #endif.
mdebug_javadoc=Behaves the same as #debug, but instead comments or uncomments a whole block of lines following the line it is on until it reaches #enddebug. This directive is used for debugging purposes with expressions such as System.out.println, for example. This directive can be nested. If the mdebug block partially intersects an if/ifdef/ifndef block (for example, enddebug is outside a closed if block in which mdebug is called) the preprocessor will generate errors.
undefine_javadoc=Removes temporary abilities/variables from the memory. This declaration can also be used to remove global variables defined in the project configuration properties from the preprocessor memory.

# preprocess debug level description
dl_debug_desc=debug level
dl_error_desc=error level
dl_fatal_desc=unrecoverable level
dl_info_desc=informational level
dl_warn_desc=warning level

# preprocess symbol description constants
symbol_active=Active
symbol_inactive=Inactive
symbol_configuration=Project Configuration